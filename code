from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Command
from aiogram.utils.callback_data import CallbackData, CallbackDataFilter
import logging

JoinedFile = open('–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É', 'r')
JoinedUsers = set()
for line in JoinedFile:
    JoinedUsers.add(line.strip())
JoinedFile.close()

bot = Bot(token='token')
dp = Dispatcher(bot)

menu = ReplyKeyboardMarkup(keyboard=
[
    [
        KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéÜ')
    ]

],
    resize_keyboard=True
)

callback_rasp = CallbackData('rasp', 'item_name')
callback_day = CallbackData('day', 'item')
callback_byk = CallbackData('byk', 'by')

byk = InlineKeyboardMarkup(row_width=2,
                           inline_keyboard=[
                               [
                                   InlineKeyboardButton(
                                       text='–ê',
                                       callback_data=callback_byk.new(by='–ê')
                                   ),
                                   InlineKeyboardButton(
                                       text='–ë',
                                       callback_data=callback_byk.new(by='–ë')
                                   )
                               ],

                           ])

byk1 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ê',
                                        callback_data=callback_byk.new(by='–ê1')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ë',
                                        callback_data=callback_byk.new(by='–ë1')
                                    )
                                ],

                            ])

byk2 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ê',
                                        callback_data=callback_byk.new(by='–ê2')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ë',
                                        callback_data=callback_byk.new(by='–ë2')
                                    )
                                ],

                            ])

day = InlineKeyboardMarkup(row_width=2,
                           inline_keyboard=[
                               [
                                   InlineKeyboardButton(
                                       text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                       callback_data=callback_day.new(item='PN')
                                   ),
                                   InlineKeyboardButton(
                                       text='–í—Ç–æ—Ä–Ω–∏–∫',
                                       callback_data=callback_day.new(item='VT')
                                   )
                               ],
                               [
                                   InlineKeyboardButton(
                                       text='–°—Ä–µ–¥–∞',
                                       callback_data=callback_day.new(item='CP')
                                   ),
                                   InlineKeyboardButton(
                                       text='–ß–µ—Ç–≤–µ—Ä–≥',
                                       callback_data=callback_day.new(item='WT')
                                   )
                               ],
                               [
                                   InlineKeyboardButton(
                                       text='–ü—è—Ç–Ω–∏—Ü–∞',
                                       callback_data=callback_day.new(item='PT')
                                   )
                               ]
                           ])
day1 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN1')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT1')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP1')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT1')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT1')
                                    )
                                ]
                            ])
day2 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN2')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT2')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP2')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT2')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT2')
                                    )
                                ]
                            ])
day3 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN3')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT3')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP3')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT3')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT3')
                                    )
                                ]
                            ])
day4 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN4')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT4')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP4')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT4')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT4')
                                    )
                                ]
                            ])
day5 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN5')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT5')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP5')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT5')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT5')
                                    ),
                                    InlineKeyboardButton(
                                        text='–°—É–±–±–æ—Ç–∞',
                                        callback_data=callback_day.new(item='SB5')
                                    )
                                ]
                            ])
day6 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN6')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT6')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP6')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT6')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT6')
                                    ),
                                    InlineKeyboardButton(
                                        text='–°—É–±–±–æ—Ç–∞',
                                        callback_data=callback_day.new(item='SB6')
                                    )
                                ],
                            ])

day7 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN7')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT7')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP7')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT7')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT7')
                                    ),
                                    InlineKeyboardButton(
                                        text='–°—É–±–±–æ—Ç–∞',
                                        callback_data=callback_day.new(item='SB7')
                                    )
                                ],
                            ])

day8 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN8')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT8')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP8')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT8')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT8')
                                    ),
                                    InlineKeyboardButton(
                                        text='–°—É–±–±–æ—Ç–∞',
                                        callback_data=callback_day.new(item='SB8')
                                    )
                                ],
                            ])

day9 = InlineKeyboardMarkup(row_width=2,
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                        callback_data=callback_day.new(item='PN9')
                                    ),
                                    InlineKeyboardButton(
                                        text='–í—Ç–æ—Ä–Ω–∏–∫',
                                        callback_data=callback_day.new(item='VT9')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–°—Ä–µ–¥–∞',
                                        callback_data=callback_day.new(item='CP9')
                                    ),
                                    InlineKeyboardButton(
                                        text='–ß–µ—Ç–≤–µ—Ä–≥',
                                        callback_data=callback_day.new(item='WT9')
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text='–ü—è—Ç–Ω–∏—Ü–∞',
                                        callback_data=callback_day.new(item='PT9')
                                    ),
                                    InlineKeyboardButton(
                                        text='–°—É–±–±–æ—Ç–∞',
                                        callback_data=callback_day.new(item='SB9')
                                    )
                                ],
                            ])

choice = InlineKeyboardMarkup(row_width=2,
                              inline_keyboard=[
                                  [
                                      InlineKeyboardButton(
                                          text='5 –∫–ª–∞—Å—Å',
                                          callback_data=callback_rasp.new(item_name='five')
                                      ),
                                      InlineKeyboardButton(
                                          text='6 –∫–ª–∞—Å—Å',
                                          callback_data=callback_rasp.new(item_name='six')
                                      ),
                                  ],
                                  [
                                      InlineKeyboardButton(
                                          text='7 –∫–ª–∞—Å—Å',
                                          callback_data=callback_rasp.new(item_name='seven')
                                      ),
                                      InlineKeyboardButton(
                                          text='8 –∫–ª–∞—Å—Å',
                                          callback_data=callback_rasp.new(item_name='eight')
                                      ),
                                  ],
                                  [
                                      InlineKeyboardButton(
                                          text='9 –∫–ª–∞—Å—Å',
                                          callback_data=callback_rasp.new(item_name='nine')
                                      ),
                                      InlineKeyboardButton(
                                          text='10 –∫–ª–∞—Å—Å',
                                          callback_data=callback_rasp.new(item_name='ten')
                                      ),
                                  ],
                                  [
                                      InlineKeyboardButton(
                                          text='11 –∫–ª–∞—Å—Å',
                                          callback_data=callback_rasp.new(item_name='ton')
                                      ),
                                  ],
                              ])


@dp.message_handler(Command('start'))
async def startJoin(message):
    if not str(message.chat.id) in JoinedUsers:
        JoinedFile = open('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É txt', "a")
        JoinedFile.write(str(message.chat.id) + "\n")
        JoinedUsers.add(message.chat.id)
    await message.answer(text='–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                         reply_markup=menu)

@dp.message_handler(Command('spec'))
async def sendall(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == id_user:
            text = message.text[5:]
            for user in JoinedUsers:
                await bot.send_message(user, text)


@dp.message_handler(Command('speci'))
async def sendall(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == id_user:
            text = message.text[6:]
            for user in JoinedUsers:
                await bot.send_message(user, text)

@dp.message_handler(Command('specl'))
async def sendall(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == id_user:
            text = message.text[6:]
            for user in JoinedUsers:
                await bot.send_message(user, text)




@dp.message_handler(text='—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def show_items(message: types.Message):
  await message.answer(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?',
                       reply_markup=choice)

@dp.callback_query_handler(callback_rasp.filter(item_name='five'))
async def five_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 5 –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                              reply_markup=day)

@dp.callback_query_handler(callback_day.filter(item='PN'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('5 –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–†—É—Å—Å–∫–∏–π —è–∑—ã–∫  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '4.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n'
                              '5.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2/ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1  \n'
                              '6.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '7.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='VT'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('5 –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–û–±–∂  \n'
                              '4.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–ë–∏–æ–ª–æ–≥–∏—è  \n')

@dp.callback_query_handler(callback_day.filter(item='CP'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('5 –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–ò–ó–û  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–ú—É–∑—ã–∫–∞  \n'
                              '4.–û–î–ù–ö–ù–†  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='WT'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('5 –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '2.–†—É—Å—Å–∫–∏–π  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '4.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n'
                              '5.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n'
                              '6.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='PT'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('5 –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '4.–†—É—Å—Å–∫–∏–π  \n'
                              '5.–§–∏–∑-—Ä–∞  \n')


@dp.callback_query_handler(callback_rasp.filter(item_name='six'))
async def six_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 6 –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞',
                              reply_markup=byk)

@dp.callback_query_handler(callback_byk.filter(by='–ê'))
async def day1_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 6–ê –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                                  reply_markup=day1)

@dp.callback_query_handler(callback_day.filter(item='PN1'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ê –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '_____________________ \n'
                              '2.–†—É—Å—Å–∫–∏–π  \n'
                              '3.–†—É—Å—Å–∫–∏–π  \n'
                              '4.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '5.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n'
                              '6.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '7.–û–ë–ñ  \n')

@dp.callback_query_handler(callback_day.filter(item='VT1'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ê –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–†—É—Å—Å–∫–∏–π  \n'
                              '2.–§–∏–∑-—Ä–∞  \n'
                              '3.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '4.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '5.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '6.–ò–ó–û  \n')

@dp.callback_query_handler(callback_day.filter(item='CP1'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ê –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–†—É—Å—Å–∫–∏–π  \n'
                              '2.–†—É—Å—Å–∫–∏–π  \n'
                              '3.–§–∏–∑-—Ä–∞  \n'
                              '4.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '5.–ú—É–∑—ã–∫–∞ \n'
                              '6.–õ–∏—Ç—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='WT1'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ê –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '2.–†—É—Å—Å–∫–∏–π  \n'
                              '3.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n'
                              '4.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n'
                              '5.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '6.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='PT1'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ê –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '4.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n'
                              '5.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '6.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_byk.filter(by='–ë'))
async def day2_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 6–ë –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                                  reply_markup=day2)

@dp.callback_query_handler(callback_day.filter(item='PN2'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ë –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '3.–§–∏–∑-—Ä–∞  \n'
                              '4.–û–±–∂  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–†—É—Å—Å–∫–∏–π  \n'
                              '7.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='VT2'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ë –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '4.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '5.–ò–ó–û  \n'
                              '6.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='CP2'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ë –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–ú—É–∑—ã–∫–∞  \n'
                              '2.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '3.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '4.–†—É—Å—Å–∫–∏–π  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n')

@dp.callback_query_handler(callback_day.filter(item='WT2'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ë –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n'
                              '4.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='PT2'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('6–ë –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑-—Ä–∞  \n'
                              '2.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '3.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n'
                              '4.–†—É—Å—Å–∫–∏–π  \n'
                              '5.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '6.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n')

@dp.callback_query_handler(callback_rasp.filter(item_name='seven'))
async def five_rasp(call: CallbackQuery, callback_data: dict):
        await call.answer(cache_time=60)
        logging.info(f'callback_data = {call.data}')
        logging.info(f'callback_data dict = {callback_data}')
        await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 7 –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞',
                                  reply_markup=byk1)


@dp.callback_query_handler(callback_byk.filter(by='–ê1'))
async def five_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 7–ê –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                              reply_markup=day3)

@dp.callback_query_handler(callback_day.filter(item='PN3'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ê –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '3.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '4.–†—É—Å—Å–∫–∏–π  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–ê–ª–≥–µ–±—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='VT3'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ê –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n'
                              '2.–†—É—Å—Å–∫–∏–π  \n'
                              '3.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '4.–§–∏–∑-—Ä–∞  \n'
                              '5.–§–∏–∑-—Ä–∞  \n'
                              '6.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '7.–û–ë–ñ  \n')

@dp.callback_query_handler(callback_day.filter(item='CP3'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ê –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n'
                              '2.–§–∏–∑-—Ä–∞  \n'
                              '3.–†—É—Å—Å–∫–∏–π  \n'
                              '4.–§–∏–∑–∏–∫–∞  \n'
                              '5.–ò–ó–û  \n'
                              '6.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è  \n'
                              '7.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è  \n')

@dp.callback_query_handler(callback_day.filter(item='WT3'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ê –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '2.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n'
                              '3.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '4.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n'
                              '5.–§–∏–∑–∏–∫–∞  \n'
                              '6.–ú—É–∑—ã–∫–∞  \n'
                              '7.–ò–ò–ö –°–ü–ë  \n')

@dp.callback_query_handler(callback_day.filter(item='PT3'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ê –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '2.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '3.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  \n'
                              '4.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  \n'
                              '5.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n'
                              '6.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '7.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n')

@dp.callback_query_handler(callback_byk.filter(by='–ë1'))
async def five_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 7–ë –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                              reply_markup=day4)

@dp.callback_query_handler(callback_day.filter(item='PN4'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ë –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n'
                              '3.–§–∏–∑–∏–∫–∞  \n'
                              '4.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '5.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '6.–§–∏–∑-—Ä–∞  \n'
                              '7.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n')

@dp.callback_query_handler(callback_day.filter(item='VT4'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ë –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1  \n'
                              '2.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1  \n'
                              '3.–§–∏–∑-—Ä–∞  \n'
                              '4.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n'
                              '7.–û–±—â–µ—Å—Ç–≤–æ  \n')

@dp.callback_query_handler(callback_day.filter(item='CP4'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ë –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '2.–ò–ó–û  \n'
                              '3.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '4.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '5.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n'
                              '6.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='WT4'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ë –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–ò–ò–ö –°–ü–ë  \n'
                              '2.–û–ë–ñ  \n'
                              '3.–§–∏–∑–∏–∫–∞  \n'
                              '4.–ú—É–∑—ã–∫–∞  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–†—É—Å—Å–∫–∏–π  \n'
                              '7.–ê–ª–≥–µ–±—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='PT4'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('7–ë –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n'
                              '2.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n'
                              '3.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '4.–§–∏–∑-—Ä–∞  \n'
                              '5.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '6.–†—É—Å—Å–∫–∏–π  \n'
                              '7.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n')

@dp.callback_query_handler(callback_rasp.filter(item_name='eight'))
async def five_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 8 –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                              reply_markup=day5)

@dp.callback_query_handler(callback_day.filter(item='PN5'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('8 –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–§–∏–∑-—Ä–∞  \n'
                              '3.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '4.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '5.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n'
                              '6.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='VT5'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('8 –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–ò–ò–ö –°–ü–ë  \n'
                              '2.–•–∏–º–∏—è  \n'
                              '3.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1  \n'
                              '4.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n'
                              '5.–†—É—Å—Å–∫–∏–π  \n'
                              '6.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n'
                              '7.–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='CP5'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('8 –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–†—É—Å—Å–∫–∏–π  \n'
                              '2.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '3.–§–∏–∑–∏–∫–∞  \n'
                              '4.–ò–ó–û  \n'
                              '5.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '6.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n'
                              '7.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='WT5'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('8 –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n'
                              '2.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1  \n'
                              '3.–û–ë–ñ  \n'
                              '4.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '5.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '6.–•–∏–º–∏—è  \n')

@dp.callback_query_handler(callback_day.filter(item='PT5'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('8 –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '2.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '3.–†—É—Å—Å–∫–∏–π  \n'
                              '4.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '5.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '6.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n'
                              '7.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='SB5'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('8 –∫–ª–∞—Å—Å (–°–ë) \n'
                              '_____________________ \n'
                              '1.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '2.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '3.–ú–•–ö  \n'
                              '4.–§–∏–∑–∏–∫–∞  \n')

@dp.callback_query_handler(callback_rasp.filter(item_name='nine'))
async def five_rasp(call: CallbackQuery, callback_data: dict):
        await call.answer(cache_time=60)
        logging.info(f'callback_data = {call.data}')
        logging.info(f'callback_data dict = {callback_data}')
        await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 9 –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                                  reply_markup=day6)

@dp.callback_query_handler(callback_day.filter(item='PN6'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('9 –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–§–∏–∑–∏–∫–∞  \n'
                              '3.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '4.–†—É—Å—Å–∫–∏–π  \n'
                              '5.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '6.–ë–∏–æ–ª–æ–≥–∏—è  \n')

@dp.callback_query_handler(callback_day.filter(item='VT6'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('9 –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–•–∏–º–∏—è  \n'
                              '2.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '3.–ì–µ–æ–º–µ—Ç—Ä–∏—è  \n'
                              '4.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '5.–ò–ò–ö –°–ü–ë  \n'
                              '6.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='CP6'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('9 –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '2.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '3.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '4.–§–∏–∑–∏–∫–∞  \n'
                              '5.–§–∏–∑–∏–∫–∞  \n'
                              '6.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '7.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='WT6'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer(
                              '9 –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '–£—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ 9:50  \n'
                              '2.–•–∏–º–∏—è  \n'
                              '3.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π2  \n'
                              '4.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π2  \n'
                              '5.–ì–µ–æ–º–µ—Ç—Ä–∏—è \n'
                              '6.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞2/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π1 \n'
                              '7.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞2/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π1 \n')

@dp.callback_query_handler(callback_day.filter(item='PT6'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('9 –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–ê–ª–≥–µ–±—Ä–∞  \n'
                              '2.–†—É—Å—Å–∫–∏–π  \n'
                              '3.–†—É—Å—Å–∫–∏–π  \n'
                              '4.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '5.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '6.–û–ë–ñ  \n'
                              '7.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='SB6'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('9 –∫–ª–∞—Å—Å (–°–ë) \n'
                              '_____________________ \n'
                              '1.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '2.–ú–•–ö  \n'
                              '3.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '4.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '5.–§–∏–∑-—Ä–∞  \n')

@dp.callback_query_handler(callback_rasp.filter(item_name='ten'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 10 –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞',
                              reply_markup=byk2)

@dp.callback_query_handler(callback_byk.filter(by='–ê2')) # 10 A
async def five_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 10–ê –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                                  reply_markup=day7)

@dp.callback_query_handler(callback_day.filter(item='PN7'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ê –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1  \n'
                              '3.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n'
                              '4.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '5.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '6.–§–∏–∑–∏–∫–∞  \n'
                              '7.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –≠–ª.  \n')

@dp.callback_query_handler(callback_day.filter(item='VT7'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ê –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–†—É—Å—Å–∫–∏–π  \n'
                              '2.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '3.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '4.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '5.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '6.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '7.–ò—Å—Ç–æ—Ä–∏—è –≠–ª.  \n')

@dp.callback_query_handler(callback_day.filter(item='CP7'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ê –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑-—Ä–∞  \n'
                              '2.–ò–ü  \n'
                              '3.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '4.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '5.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '6.–§–∏–∑–∏–∫–∞  \n'
                              '7.–ë–∏–æ–ª–æ–≥–∏—è –≠–ª.  \n')

@dp.callback_query_handler(callback_day.filter(item='WT7'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ê –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑-—Ä–∞  \n'
                              '2.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '3.–ü—Ä–∞–≤–æ  \n'
                              '4.–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è  \n'
                              '5.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '6.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '7.–•–∏–º–∏—è –≠–ª.1/–ê–Ω–≥–ª –≠–ª. 1  \n')

@dp.callback_query_handler(callback_day.filter(item='PT7'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ê –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–†—É—Å—Å–∫–∏–π  \n'
                              '2.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '3.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '4.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '5.–û–ë–ñ  \n'
                              '6.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n'
                              '7.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='SB7'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ê –∫–ª–∞—Å—Å (–°–ë) \n'
                              '_____________________ \n'
                              '1.–ú–•–ö  \n'
                              '2.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '3.–ü—Ä–∞–≤–æ  \n'
                              '4.–§–∏–∑-—Ä–∞  \n'
                              '5.–ë–∏–æ–ª–æ–≥–∏—è  \n')

@dp.callback_query_handler(callback_byk.filter(by='–ë2')) # 10 B
async def five_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 10–ë –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                                  reply_markup=day8)

@dp.callback_query_handler(callback_day.filter(item='PN8'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ë –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '4.–§–∏–∑–∏–∫–∞  \n'
                              '5.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '6.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n'
                              '7.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 1/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2  \n')

@dp.callback_query_handler(callback_day.filter(item='VT8'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ë –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  \n'
                              '2.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  \n'
                              '3.–†—É—Å—Å–∫–∏–π  \n'
                              '4.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '5.–ò–ü  \n'
                              '6.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '7.–•–∏–º–∏—è –≠–ª.  \n')

@dp.callback_query_handler(callback_day.filter(item='CP8'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ë –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑–∏–∫–∞  \n'
                              '2.–§–∏–∑–∏–∫–∞  \n'
                              '3.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2  \n'
                              '4.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1/–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 2  \n'
                              '5.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '6.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '7.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n')

@dp.callback_query_handler(callback_day.filter(item='WT8'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ë –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑–∏–∫–∞  \n'
                              '2.–§–∏–∑–∏–∫–∞  \n'
                              '3.–•–∏–º–∏—è  \n'
                              '4.–ü—Ä–∞–≤–æ  \n'
                              '5.–û–ë–ñ  \n'
                              '6.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '7.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n')

@dp.callback_query_handler(callback_day.filter(item='PT8'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ë –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '4.–§–∏–∑-—Ä–∞  \n'
                              '5.–§–∏–∑-—Ä–∞  \n'
                              '6.–†—É—Å—Å–∫–∏–π  \n'
                              '7.–ë–∏–æ–ª–æ–≥–∏—è –≠–ª. 2/–û–±—â–µ—Å—Ç–≤–æ –≠–ª. 1  \n')


@dp.callback_query_handler(callback_day.filter(item='SB8'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('10–ë –∫–ª–∞—Å—Å (–°–ë) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑-—Ä–∞  \n'
                              '2.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '3.–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è  \n'
                              '4.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '5.–ò—Å—Ç–æ—Ä–∏—è –≠–ª. \n')


@dp.callback_query_handler(callback_rasp.filter(item_name='ton')) # 11 –∫–ª–∞—Å—Å
async def five_rasp(call: CallbackQuery, callback_data: dict):
        await call.answer(cache_time=60)
        logging.info(f'callback_data = {call.data}')
        logging.info(f'callback_data dict = {callback_data}')
        await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 11 –∫–ª–∞—Å—Å–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                              reply_markup=day9)

@dp.callback_query_handler(callback_day.filter(item='PN9'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('11 –∫–ª–∞—Å—Å (–ü–ù) \n'
                              '_____________________ \n'
                              '1.–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º  \n'
                              '2.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '3.–†—É—Å—Å–∫–∏–π  \n'
                              '4.–ì–µ–æ–≥—Ä–∞—Ñ–∏—è  \n'
                              '5.–§–∏–∑–∏–∫–∞  \n'
                              '6.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '7.–û–±—â–µ—Å—Ç–≤–æ –≠–ª.  \n')

@dp.callback_query_handler(callback_day.filter(item='VT9'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('11 –∫–ª–∞—Å—Å (–í–¢) \n'
                              '_____________________ \n'
                              '1.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '2.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '4.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '5.–•–∏–º–∏—è  \n'
                              '6.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '7.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –≠–ª.  \n')

@dp.callback_query_handler(callback_day.filter(item='CP9'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('11 –∫–ª–∞—Å—Å (–°–†) \n'
                              '_____________________ \n'
                              '1.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  \n'
                              '2.–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '4.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞  \n'
                              '5.–ò–ü  \n'
                              '6.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n'
                              '7.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n')

@dp.callback_query_handler(callback_day.filter(item='WT9'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('11 –∫–ª–∞—Å—Å (–ß–¢) \n'
                              '_____________________ \n'
                              '1.–ê–Ω–≥–ª–∏–π—Å–∫–∏–π  \n'
                              '2.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '3.–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞  \n'
                              '4.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '5.–û–±—â–µ—Å—Ç–≤–æ  \n'
                              '6.–†—É—Å—Å–∫–∏–π –≠–ª 1/2  \n')

@dp.callback_query_handler(callback_day.filter(item='PT9'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('11 –∫–ª–∞—Å—Å (–ü–¢) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑-—Ä–∞  \n'
                              '2.–ò—Å—Ç–æ—Ä–∏—è  \n'
                              '3.–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≠–ª.  \n'
                              '4.–û–ë–ñ  \n'
                              '5.–ë–∏–æ–ª–æ–≥–∏—è  \n'
                              '6.–†—É—Å—Å–∫–∏–π  \n')

@dp.callback_query_handler(callback_day.filter(item='SB9'))
async def ten_rasp(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f'callback_data = {call.data}')
    logging.info(f'callback_data dict = {callback_data}')
    await call.message.answer('11 –∫–ª–∞—Å—Å (–°–ë) \n'
                              '_____________________ \n'
                              '1.–§–∏–∑–∏–∫–∞  \n'
                              '2.–§–∏–∑-—Ä–∞  \n'
                              '3.–§–∏–∑-—Ä–∞  \n'
                              '4.–ú–•–ö  \n'
                              '5.–ò—Å—Ç–æ—Ä–∏—è  \n')

executor.start_polling(dp)
